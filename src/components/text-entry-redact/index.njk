{% extends layoutTemplate %}

{% from "govuk/components/error-summary/macro.njk" import govukErrorSummary %}
{% from "govuk/components/textarea/macro.njk" import govukTextarea %}
{% from "govuk/components/label/macro.njk" import govukLabel %}
{% from "govuk/components/button/macro.njk" import govukButton %}
{% from "govuk/components/checkboxes/macro.njk" import govukCheckboxes %}
{% from "govuk/components/inset-text/macro.njk" import govukInsetText %}
{% from "govuk/components/table/macro.njk" import govukTable %}

{% block before_content %}
    <div class="govuk-grid-row">
        <div class="govuk-grid-column-two-thirds">
            {% if errorSummary %}
                {{ govukErrorSummary({
                    titleText: "There is a problem",
                    errorList: errorSummary,
                    attributes: {"data-cy": "error-wrapper"}
                }) }}
            {% endif %}
        </div>
    </div>

    {{ super() }}
{% endblock before_content %}

{% set columnWidth = 'govuk-grid-column-two-thirds' %}
{% if showSuggestionsUi %}
    {% set columnWidth = 'govuk-grid-column-one-half' %}
{% endif %}

{% block content %}
    <div class="govuk-grid-row">
        <div class="{{ columnWidth }}">
            <form action="" method="post" novalidate>
                <input type="hidden" name="_csrf" value="{{ _csrf }}">

                {% if question.label %}
                    {{ govukLabel({
                        text: question.question,
                        isPageHeading: true,
                        classes: 'govuk-label--l',
                        for: question.fieldName
                    }) }}
                {% else %}
                    <h1 class="govuk-heading-l">
                        <span class="govuk-caption-xl">{{ reference }}</span>
                        {{ question.question }}
                    </h1>
                {% endif %}

                {% if question.html %}
                    {% include question.html ignore missing %}
                {% endif %}

                {{ govukInsetText({
                    html: question.value,
                    id: question.fieldName + "-unredacted"
                }) }}

                {{ govukTextarea({
                    label: {
                        text: question.label
                    },
                    id: question.fieldName,
                    name: question.fieldName,
                    value: question.valueRedacted,
                    hint: question.hint and { text: question.hint },
                    errorMessage: errors[question.fieldName] and {
                        text: errors[question.fieldName].msg
                    },
                    classes: question.inputClasses
                }) }}

                <div class="govuk-button-group">
                    {{ govukButton({
                        text: "Redact selected text",
                        classes: "govuk-button--secondary",
                        id: "redact-selected-text",
                        type: "button"
                    }) }}

                    {{ govukButton({
                        text: "Undo",
                        classes: "govuk-button--secondary",
                        id: "redact-undo",
                        type: "button"
                    }) }}

                    {{ govukButton({
                        text: "Undo all changes",
                        classes: "govuk-button--secondary",
                        id: "redact-undo-all",
                        type: "button"
                    }) }}
                </div>

                {{ govukButton({
                    text: continueButtonText,
                    type: "submit",
                    attributes: { "data-cy":"button-save-and-continue" }
                }) }}
            </form>
        </div>
        {% if showSuggestionsUi %}
            <div class="govuk-grid-column-one-half">
                <h2 class="govuk-heading-m">Redaction suggestions</h2>
                <p class="govuk-body">
                    This section includes system suggestions for redactions.
                    Each row shows the text that is suggested for redaction and the category detected.
                    They are all redacted by default, you can reject any that should not be redacted by clicking the "Reject" link next to each suggestion.
                </p>
                {% set suggestionTableRows = [] %}
                {% for s in redactionSuggestions  %}
                    {% set category = s.category %}
                    {% if s.subCategory %}
                        {% set category = category + " (" +  s.subCategory + ")" %}
                    {% endif %}
                    {% set action = 'Accept' %}
                    {% if s.accepted %}
                        {% set action = 'Reject' %}
                    {% endif %}
                    {% set suggestionTableRows = (suggestionTableRows.push([
                        {text: s.text},
                        {text: category },
                        {
                            html: '<a href="#" class="govuk-link" data-redact="suggestion-reject-' + loop.index0 + '">' + action + '</a>'
                        }
                    ]), suggestionTableRows) %}
                {% endfor %}
                {{  govukTable({
                    head: [
                        {
                            text: "Text"
                        },
                        {
                            text: "Category"
                        },
                        {
                            text: "Action"
                        }
                    ],
                    rows: suggestionTableRows
                }) }}
            </div>
        {% endif %}

        <script {% if cspNonce %}nonce={{ cspNonce }}{% endif %}>
            /**
             * @param {HTMLTextAreaElement} textArea
             * @param {HTMLButtonElement} redactSelectedText
             * @param {HTMLButtonElement} redactUndo
             * @param {HTMLButtonElement} redactUndoAll
             * @param {HTMLDivElement} unredactedText
             * @param {HTMLAnchorElement[]} rejectLinks
             * @param {import('@azure/ai-text-analytics').PiiEntity[]} suggestions
             */
            function registerEventListeners({textArea, redactSelectedText, redactUndo, redactUndoAll, unredactedText, rejectLinks, suggestions}) {
				const formGroup = textArea.parentElement;
                const errorMessage = document.createElement('p');
                errorMessage.id = '{{ question.fieldName }}-error';
				errorMessage.classList.add('govuk-error-message');

                const history = [];
				function showError(message) {
					formGroup.classList.add('govuk-form-group--error');
					errorMessage.textContent = message;
					formGroup.prepend(errorMessage);
                }
                function hideError() {
					textArea.parentElement.classList.remove('govuk-form-group--error');
					errorMessage.remove();
                }
                redactSelectedText.addEventListener('click', () => {
                    const { selectionStart, selectionEnd } = textArea;
					if (selectionStart === selectionEnd) {
						// no selected text
                        showError('Select text to redact');
                        return;
                    }
					hideError();
                    // replace the text with the 'full block' █ character
                    const selectedText = textArea.value.substring(selectionStart, selectionEnd);
                    const redactedText = '█'.repeat(selectionEnd - selectionStart);
                    textArea.value = textArea.value.substring(0, selectionStart) + redactedText + textArea.value.substring(selectionEnd);
                    // add to history for undo functionality
                    history.push({
                      selectionStart,
                      selectionEnd,
                      selectedText
                    });
                });
                redactUndo.addEventListener('click', () => {
                    const { selectionStart, selectionEnd, selectedText } = history.pop() || {};
                    if (selectionStart !== undefined && selectionEnd !== undefined && selectedText) {
                        hideError();
                        textArea.value = textArea.value.substring(0, selectionStart) + selectedText + textArea.value.substring(selectionEnd);
                    } else {
                        showError('No changes to undo');
                    }
                });
                redactUndoAll.addEventListener('click', () => {
                    const unredated = unredactedText.textContent?.trim();
                    if (history.length === 0 && textArea.value === unredated) {
                        showError('No changes to undo');
                        return;
                    }
					hideError();
                    textArea.value = unredated || '';
                    history.length = 0;
                });
                for (const rejectLink of rejectLinks) {
                    rejectLink.addEventListener('click', () => {
                        const index = parseInt(rejectLink.getAttribute('data-redact').replace('suggestion-reject-', ''));
                        const suggestion = suggestions[index];
                        if (rejectLink.text === 'Reject') {
                            textArea.value = textArea.value.substring(0, suggestion.offset) + suggestion.text + textArea.value.substring(suggestion.offset + suggestion.length);
                            rejectLink.text = 'Accept';
                        } else {
                            const redactedText = '█'.repeat(suggestion.length);
                            textArea.value = textArea.value.substring(0, suggestion.offset) + redactedText+ textArea.value.substring(suggestion.offset + suggestion.length);
                            rejectLink.text = 'Reject';
                        }
                    });
                }
            }

            function initRedact() {
                const textArea = document.querySelector('#{{ question.fieldName }}');
                const redactSelectedText = document.querySelector('#redact-selected-text');
                const redactUndo = document.querySelector('#redact-undo');
                const redactUndoAll = document.querySelector('#redact-undo-all');
                const unredactedText = document.querySelector('#{{ question.fieldName }}-unredacted');
                const rejectLinks = document.querySelectorAll('[data-redact]');
                {% if not redactionSuggestions %}
                    {% set redactionSuggestions = [] %}
                {% endif %}
                const suggestions = {{ redactionSuggestions | dump | safe }}

                if (!textArea || !(textArea instanceof HTMLTextAreaElement)) {
                    return;
                }
                if (!redactSelectedText || !(redactSelectedText instanceof HTMLButtonElement)) {
                    return;
                }
                if (!redactUndo || !(redactUndo instanceof HTMLButtonElement)) {
                    return;
                }
                if (!redactUndoAll || !(redactUndoAll instanceof HTMLButtonElement)) {
                    return;
                }
                if (!unredactedText || !(unredactedText instanceof HTMLDivElement)) {
                    return;
                }

                registerEventListeners({textArea, redactSelectedText, redactUndo, redactUndoAll, unredactedText, rejectLinks, suggestions});
            }

            initRedact();
        </script>
    </div>
{% endblock %}
